
daemon off; # control by supervisord
worker_processes 4;
error_log _GBC_CORE_ROOT_/logs/nginx-error.log;
pid _GBC_CORE_ROOT_/tmp/nginx.pid;

events {
    worker_connections 256;
}

http {
    include '_GBC_CORE_ROOT_/bin/openresty/nginx/conf/mime.types';

    # logs
    log_format compression '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $bytes_sent '
                        '"$http_referer" "$http_user_agent" "$gzip_ratio"';
    access_log _GBC_CORE_ROOT_/logs/nginx-access.log compression;

    # tmp
    client_body_temp_path _GBC_CORE_ROOT_/tmp/client_body_temp;
    fastcgi_temp_path _GBC_CORE_ROOT_/tmp/fastcgi_temp;
    proxy_temp_path _GBC_CORE_ROOT_/tmp/proxy_temp;
    scgi_temp_path _GBC_CORE_ROOT_/tmp/scgi_temp;
    uwsgi_temp_path _GBC_CORE_ROOT_/tmp/uwsgi_temp;

    # security
    client_max_body_size 32k;
    server_tokens off;
    client_body_buffer_size 16K;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 1k;
    autoindex off;
    ssi off;

    # lua
    lua_check_client_abort on;
    lua_socket_log_errors off;
    lua_package_path '_GBC_CORE_ROOT_/src/?.lua;_GBC_CORE_ROOT_/src/lib/?.lua;;';
    lua_shared_dict _GBC_ 1024k;
    lua_code_cache off;

    init_by_lua '

require("framework.init")

local appKeys = dofile("_GBC_CORE_ROOT_/tmp/app_keys.lua")
local globalConfig = dofile("_GBC_CORE_ROOT_/tmp/config.lua")

cc.DEBUG = globalConfig.DEBUG

local gbc = cc.import("#gbc")
cc.exports.nginxBootstrap = gbc.NginxBootstrap:create(appKeys, globalConfig)

';

    server {
        listen 8088 so_keepalive=on;

        location = /nginx_status {
            stub_status;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }

        # apps
        # DO NOT MODIFY BELOW LINES
        #_INCLUDE_APPS_ENTRY_
    }

}
